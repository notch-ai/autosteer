name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      draft:
        description: 'Create as draft release (for testing)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run postinstall
        run: pnpm run postinstall

      - name: Run unit tests
        run: pnpm test:unit

  build:
    name: Build for ${{ matrix.platform }}
    needs: test

    strategy:
      matrix:
        include:
          - platform: mac
            os: macos-latest
            artifact_path: "out/make/*.zip"
          - platform: linux
            os: ubuntu-latest
            artifact_path: "out/make/*.deb,out/make/*.rpm"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run postinstall
        run: pnpm run postinstall

      - name: Setup macOS certificate
        if: matrix.platform == 'mac' && env.APPLE_CERTIFICATE != ''
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
          KEYCHAIN_PASSWORD=$(openssl rand -hex 16)

          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Clean up certificate file
          rm certificate.p12

      # Build distributables with electron-forge
      - name: Build distributables
        run: pnpm make
        timeout-minutes: 30
        env:
          # macOS signing and notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # Skip notarization due to unsigned binaries in @anthropic-ai/claude-agent-sdk vendor folder
          SKIP_NOTARIZE: true

      - name: Generate checksums
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            CHECKSUM_CMD="shasum -a 256"
          else
            CHECKSUM_CMD="sha256sum"
          fi

          find out -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.zip" \) | while read file; do
            $CHECKSUM_CMD "$file" > "$file.sha256"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autosteer-${{ matrix.platform }}
          path: |
            out/**/*.deb
            out/**/*.rpm
            out/**/*.zip
            out/**/*.sha256
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: release-artifacts

      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
            release-artifacts/**/*.zip
            release-artifacts/**/*.sha256
          fail_on_unmatched_files: false
          draft: ${{ github.event.inputs.draft == 'true' }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
